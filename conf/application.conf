# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret = "oTNzei]Q_yt<l>Z;soMiBf]8vlwv^<h]o8VZ=QMXwd0Nak_rf:NWquDnF1v3A6Lj"

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
#
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
# db.default.username=sa
# db.default.password=""

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false

akka {
  extensions = ["com.romix.akka.serialization.kryo.KryoSerializationExtension$"]
  serialization.Serializer = "com.romix.akka.serialization.kryo.KryoSerializer"
  actor {
    provider = "akka.cluster.ClusterActorRefProvider"
    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    serialization-bindings {

    }
  }

  remote {
    netty.tcp {
      hostname = "127.0.0.1"
      port = 0
    }
  }

  cluster {
    seed-nodes = [
      "akka.tcp://application@127.0.0.1:2551",
      "akka.tcp://application@127.0.0.1:2552"
    ]
    roles = ["frontend"]
    auto-down-unreachable-after = 10s
  }
}


akka.actor.deployment {

  /userRouter {
    router = round-robin-group
    routees.paths = ["/user/user"]
    cluster {
      enabled = on
      allow-local-routees = off
      use-role = user
    }
  }

  /examinerRouter {
    router = round-robin-group
    routees.paths = ["/user/examiner"]
    cluster {
      enabled = on
      allow-local-routees = off
      use-role = examiner
    }
  }
}

akka.actor.warn-about-java-serializer-usage = off

# Disable legacy metrics in akka-cluster.
akka.cluster.metrics.enabled=off

akka.remote.log-remote-lifecycle-events = on


kryo  {
  # Possibles values for type are: graph or nograph
  # graph supports serialization of object graphs with shared nodes
  # and cyclic references, but this comes at the expense of a small
  # overhead nograph does not support object grpahs with shared nodes,
  # but is usually faster
  type = "graph"

  # Possible values for idstrategy are:
  # default, explicit, incremental
  #
  # default - slowest and produces bigger serialized representation.
  # Contains fully-qualified class names (FQCNs) for each class. Note
  # that selecting this strategy does not work in version 0.3.2, but
  # is available on master and from 0.3.3 onward.
  #
  # explicit - fast and produces compact serialized representation.
  # Requires that all classes that will be serialized are pre-registered
  # using the "mappings" and "classes" sections. To guarantee that both
  # sender and receiver use the same numeric ids for the same classes it
  # is advised to provide exactly the same entries in the "mappings"
  # section.
  #
  # incremental - fast and produces compact serialized representation.
  # Support optional pre-registering of classes using the "mappings"
  # and "classes" sections. If class is not pre-registered, it will be
  # registered dynamically by picking a next available id To guarantee
  # that both sender and receiver use the same numeric ids for the same
  # classes it is advised to pre-register them using at least the "classes" section.

  idstrategy = "incremental"

  # Define a default size for serializer pool
  # Try to define the size to be at least as big as the max possible
  # number of threads that may be used for serialization, i.e. max
  # number of threads allowed for the scheduler
  serializer-pool-size = 16

  # Define a default size for byte buffers used during serialization
  buffer-size = 4096

  # The serialization byte buffers are doubled as needed until they
  # exceed max-buffer-size and an exception is thrown. Can be -1
  # for no maximum.
  max-buffer-size = -1

  # If set, akka uses manifests to put a class name
  # of the top-level object into each message
  use-manifests = false

  # The transformations that have be done while serialization
  # Supported transformations: compression and encryption
  # accepted values(comma separated if multiple): off | lz4 | deflate | aes
  # Transformations occur in the order they are specified
  post-serialization-transformations = "lz4,aes"

  # Settings for aes encryption, if included in transformations AES
  # algo mode, key and custom key class can be specified AES algo mode
  # defaults to 'AES/CBC/PKCS5Padding' and key to 'ThisIsASecretKey'.
  # If custom key class is provided, Kryo will use the class specified
  # by a fully qualified class name to get custom AES key. Such a
  # class should define the method 'kryoAESKey'. This key overrides 'key'.
  # If class doesn't contain 'kryoAESKey' method, specified key is used.
  # If this is not present, default key is used
  encryption {
    aes {
      mode = "AES/CBC/PKCS5Padding"
      key = j68KkRjq21ykRGAQ
      custom-key-class = "CustomAESKeyClass"
    }
  }

  # Log implicitly registered classes. Useful, if you want to know all
  # classes which are serialized. You can then use this information in
  # the mappings and/or classes sections
  implicit-registration-logging = false

  # If enabled, Kryo logs a lot of information about serialization process.
  # Useful for debugging and lowl-level tweaking
  kryo-trace = false

  # If proviced, Kryo uses the class specified by a fully qualified
  # class name to perform a custom initialization of Kryo instances in
  # addition to what is done automatically based on the config file.
  kryo-custom-serializer-init = "CustomKryoSerializerInitFQCN"

  # Define mappings from a fully qualified class name to a numeric id.
  # Smaller ids lead to smaller sizes of serialized representations.
  #
  # This section is mandatory for idstartegy=explicit
  # This section is optional  for idstartegy=incremental
  # This section is ignored   for idstartegy=default
  #
  # The smallest possible id should start at 20 (or even higher), because
  # ids below it are used by Kryo internally e.g. for built-in Java and
  # Scala types
  # mappings {}

  # Define a set of fully qualified class names for
  # classes to be used for serialization.
  # The ids for those classes will be assigned automatically,
  # but respecting the order of declaration in this section
  #
  # This section is optional  for idstartegy=incremental
  # This section is ignored   for idstartegy=default
  # This section is optional  for idstartegy=explicit
  # classes = []
}